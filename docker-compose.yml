services:
  kafka: # Сервис кафка
    image: bitnami/kafka:latest # Указываем образ, на котором будет запускаться сервис
    ports: # Порты на котором мы можем обращаться к сервису (Список [el1, el2])
      - "9092:9092" #  <порт контейнера(нельзя менять произвольно, определяется образом kafka)>:<Порт хоста(можно менять как угодно, для доступа с вашего компьютера)>
      - "9090:9090" # Случайный порт хоста (docker сам выберет свободный порт хоста)
      - "9091:9091"
    environment: # Переменные окружения (k=v)
      - KAFKA_CFG_NODE_ID=1 # Уникальный ID ноды в кластере (для каждой свой ID)
      - KAFKA_KRAFT_CLUSTER_ID=DWfwefwefew # Уникальный ID кластера (Может быть любой строкой)
      - KAFKA_CFG_PROCESS_ROLES=controller,broker # контролер - управление метаданными кластера, брокер принимает и отправляет сообщения клиентам
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9091 # Список всех controller нод в формате <node_id@host:port>
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9090,CONTROLLER://:9091,EXTERNAL://:9092 # Определяет какие порты слушает кафка и для каких целей 
      # PLAINTEXT://:9090 - Для общения между брокерами (внутренний)
      # CONTROLLER://:9091 - Для controller коммуникации (внутренний)
      # EXTERNAL://:9092 - Для внешних клиентов (внешний)
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9090,EXTERNAL://kafka:9092 # Как клиенты должны подключаться к этому брокеру
      # PLAINTEXT://kafka:9090 - Внутреннее имя для межброкерного общения
      # EXTERNAL://localhost:9092 - Внешнее имя для клиентов (HOSTNAME или localhost)
      
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT # Соответствие между listener и протоколом безопасности
      
      - KAFKA_CFG_CONTROLLER_LISTENER_NAME=CONTROLLER # Какой listener использовать для controller коммуникации
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT # Какой listener использовать для общения между брокерами
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER # Какие список listener использовать для controller коммуникации
    volumes:
      - kafka_data:/bitnami/kafka
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server kafka:9092 --list"]
  main-service:
    build:
      context: ./main-service
      dockerfile: Dockerfile
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: Orders
      DB_USER: postgres
      DB_PASSWORD: password
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    ports:
      - 8080:8080
    volumes:
      - ./configs:/app/configs
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.5'
        reservations:
          memory: 64M
          cpus: '0.25'
    startup_delay: "10s"
  
  frontend:
    image: halverneus/static-file-server:latest
    volumes:
      - ./front:/web 
    ports:
      - "3000:8080"     # localhost:3000 -> контейнер:8080
    restart: unless-stopped
  producer-service:
    build:
      context: ./producer-service
      dockerfile: Dockerfile
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: Orders
      DB_USER: postgres
      DB_PASSWORD: password
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
      main-service:
        condition: service_started
    volumes:
      - ./configs:/app/configs
    deploy:
      resources:
        limits:
          memory: 64M
          cpus: '0.3'
        reservations:
          memory: 32M
          cpus: '0.15'
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: Orders
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - 5432:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d Orders"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    depends_on:
      kafka:
        condition: service_started

volumes:
  postgres_data:
  kafka_data: